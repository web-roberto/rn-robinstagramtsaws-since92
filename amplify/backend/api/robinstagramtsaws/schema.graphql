# 1:N - en N el FK: @index + @belongsTo - lo hacemos manual pq el sistema no lo hace bien
# 1:N - en 1 @hasMany
# INDICE para consultar rÃ¡pido -> username: String @index(name:"usersByUsername",queryField:"usersByUsername")
# INDICE de Posts ordenados por User: -> postID: ID! @index(name: "byPost",queryField:"LikesForPostByUser", sortKeyFields:["userID"])
# amplify push -yes -> actualiza en AWS y genera la consulta en `graphql/queries.ts' AL FINAL DEL FICHERO
type Like @model @auth(rules: [{allow: private, operations:[read]},{allow:owner}]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  postID: ID! @index(name: "byPost",queryField:"likesForPostByUser", sortKeyFields:["userID"])
  User: User @belongsTo(fields: ["userID"])
  Post: Post @belongsTo(fields: ["postID"])
}

type Comment @model @auth(rules: [{allow: private, operations:[read]},{allow:owner}]) {
  id: ID!
  createdAt:AWSDateTime!
  comment: String!
  userID: ID! @index(name: "byUser")
  postID: ID! @index(name: "byPost",queryField:"commentsByPost", sortKeyFields:["createdAt"])
  User: User @belongsTo(fields: ["userID"])
  Post: Post @belongsTo(fields: ["postID"])
}

type Post @model @auth(rules: [{allow: private, operations:[read]},{allow:owner}]) {
  id: ID!
  createdAt:AWSDateTime!
  type: String! @index(name: "postsByDate",queryField:"postsByDate", sortKeyFields:["createdAt"])
  description: String
  location: String
  image: String
  images: [String!]
  nofLikes: Int!
  video: String
  nofComments: Int!
  userID: ID! @index(name: "byUser")
  User: User @belongsTo(fields: ["userID"])
  Likes: [Like] @hasMany(indexName: "byPost", fields: ["id"])
  Comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
}

type User @model @auth(rules: [{allow: private, operations:[read]},{allow:owner}]) {
  id: ID!
  name: String!
  email: String @auth(rules: [{allow:owner}])
  bio: String
  username: String @index(name:"usersByUsername",queryField:"usersByUsername")
  website: AWSURL
  nofPosts: Int!
  nofFollowers: Int!
  nofFollowings: Int!
  image: String
  Posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
  Comments: [Comment] @hasMany(indexName: "byUser", fields: ["id"])
  Likes: [Like] @hasMany(indexName: "byUser", fields: ["id"])
}

type Subscription {
  onCreateCommentByPostId(postID:ID!): Comment @aws_subscribe(mutations: ["createComment"])
}
